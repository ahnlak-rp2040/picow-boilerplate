name: CMake

on:
  push:
  pull_request:
  release:
    types: [created]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    name: ${{matrix.name}}
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            name: Linux
            cmake-args: '-DPIMORONI_PICO_PATH=$GITHUB_WORKSPACE/pimoroni-pico -DPICO_SDK_PATH=$GITHUB_WORKSPACE/pico-sdk -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/install'
            apt-packages: clang-tidy gcc-arm-none-eabi libnewlib-arm-none-eabi libstdc++-arm-none-eabi-newlib

    runs-on: ${{matrix.os}}

    env:
      PICO_SDK_PATH: $GITHUB_WORKSPACE/pico-sdk
      PIMORONI_PICO_LIBS: $GITHUB_WORKSPACE/pimoroni-pico
      RELEASE_FILE: ${{github.event.repository.name}}-${{github.event.release.tag_name}}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        path: project

    # Checkout the Pico SDK
    - name: Checkout Pico SDK
      uses: actions/checkout@v3
      with:
        repository: raspberrypi/pico-sdk
        path: pico-sdk
        submodules: true

    # Checkout the Pimoroni Pico Libraries
    - name: Checkout Pimoroni Pico Libraries
      uses: actions/checkout@v3
      with:
        repository: pimoroni/pimoroni-pico
        path: pimoroni-pico

    # Install the cross-compiler and any other dependencies
    - name: Install Dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt update && sudo apt install ${{matrix.apt-packages}}

    # Create the build directory
    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    # Ask CMake to configure the build scripts
    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE/project -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCPACK_PACKAGE_FILE_NAME=${{env.RELEASE_FILE}} ${{matrix.cmake-args}}

    # Compile the project
    - name: Build Project
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: |
        cmake --build . --config $BUILD_TYPE -j 2

    # Only on releases - assemble the distributable ZIP file
    - name: Build Release Packages
      if: github.event_name == 'release'
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: |
        cmake --build . --config $BUILD_TYPE --target package -j 2

    # Attach the ZIP file from the previous step, to the Github release
    - name: Attach Release Packages
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{runner.workspace}}/build/*.zip 
